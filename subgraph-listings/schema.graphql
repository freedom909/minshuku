enum CacheControlScope {  
  PUBLIC  
  PRIVATE  
  INHERIT  
}

extend schema
  @link(url: "https://specs.apollo.dev/federation/v2.7", import: ["@key", "@shareable"])

scalar DateTime
directive @cacheControl(maxAge: Int, scope: CacheControlScope) on FIELD_DEFINITION | OBJECT | INTERFACE  

# Query definitions for retrieving listing data
extend type Query {
  "Returns the details about this listing"
  listing(id: ID!): Listing @shareable
  
  "A curated array of listings to feature on the homepage"
  featuredListings: [Listing!]! @shareable

  "Return the listings that belong to the currently logged-in host"
  hostListings: [Listing]! @shareable
  
  "Returns all possible amenities for a listing"
  listingAmenities: [Amenity!]! @shareable

  """
  Search results for listings that fit the criteria provided
  Returns the listings that match the criteria provided
  """
  listings(numOfBeds: Int, page: Int, limit: Int, sortBy: String): [Listing] @shareable
  
  "Sort by sale amount"
  hotListingsByMoney: [Listing] @shareable
  
  "Sort by the number of bookings"
  hotListingsByBookingNumber: [Listing] @shareable
  
  "Get listing details with location information"
  getListingWithLocation(lat:Float!,lon:Float!,locationId: ID!): Listing @shareable
  "Get nearby listings based on latitude and longitude"
  getNearbyListings(latitude: Float!, longitude: Float!, radius: Float!): [Listing] @shareable
  "Full-text search for listings"
  fullTextSearchListings(input: FullTextSearchInput!): SearchResult! @shareable
  
  "Search listings with advanced filters"
  searchListings(
    location: LocationInput
    priceRange: PriceRangeInput
    totalCostRange: TotalCostRangeInput
    limit: Int
    offset: Int
  ): [Listing] @shareable

}


input UpdateListingStatusInput {
  id: ID!
  listingStatus: ListingStatus! 
}

enum ListingStatus {
  PUBLISHED
  ACTIVE
  PENDING
  SOLD
  DELETED
  REJECT
  CANCELLED
  EXPIRED
  COMPLETED
}

type DeleteListingResponse implements Response {
  code: Int! @shareable 
  message: String! @shareable
  success: Boolean! @shareable
  listing: Listing @shareable
}

extend type Mutation {
  "Creates a new listing for the currently authenticated host"
  createListing(input: CreateListingInput!): CreateListingResponse! @shareable
  "Updates an existing listing"
  updateListing(
    listingId: ID!
    listing: UpdateListingInput!
  ): UpdateListingResponse! @shareable
  updateListingStatus(input: UpdateListingStatusInput!): UpdateListingStatusResponse @shareable
  deleteListing(input: DeleteListingInput!): DeleteListingResponse! @shareable
}

type UpdateListingStatusResponse implements Response {
  listingStatus: ListingStatus @shareable
  code: Int! @shareable 
  message: String! @shareable
  success: Boolean! @shareable
}

# Common interface for response types
interface Response {
  "Similar to HTTP status code, represents the status of the mutation"
  code: Int!
  "Indicates whether the mutation was successful"
  success: Boolean!
  "Human-readable message for the UI"
  message: String!
}

input ReservedDateInput {
  checkInDate: String! 
  checkOutDate: String!
}

input DeleteListingInput {
  listingId: ID!
}

input LocationInput {  

  "The name of the location"  
  name: String!  
  "The latitude of the location"  
  latitude: Float  
  "The radius around the location"  
  radius: Float  
  "The longitude of the location"  
  longitude: Float  
  "The street address of the location"  
  address: String  
  "The city where the location is situated"  
  city: String  
  "The state or province of the location"  
  state: String  
  "The country of the location"  
  country: String  
  "The postal code of the location"  
  zipCode: String  
}

# Input type for creating a listing
input CreateListingInput {
  "The title of the listing"
  title: String!
  "The description of the listing"
  description: String!
   "The location details of the listing"
  location: LocationInput
  "The photo thumbnail of the listing"
  pictures: [String!]!
  "The number of beds in the listing"
  numOfBeds: Int!
  "The cost per night of the listing"
  costPerNight: Float!
  "The amenities of the listing"
  amenityIds: [AmenityInput!]!
  listingStatus: ListingStatus 
  locationType: LocationType
}

enum LocationType {
  SPACESHIP
  HOUSE
  CAMPSITE
  APARTMENT
  ROOM
}

input AmenityInput {

id:[ID!]
}

type Amenity @key(fields: "id") {
  id: ID!
  category: AmenityCategory! @shareable
  name: String! @shareable
}

enum AmenityCategory {
  ACCOMMODATION_DETAILS
  SPACE_SURVIVAL
  OUTDOORS
  UNKNOWN
}

input UpdateListingInput {
  "The listing's title"
  title: String
  "The listing's description"
  description: String
  "The thumbnail image for the listing"
  photoThumbnail: String
  "The number of beds available"
  numOfBeds: Int
  "The cost per night"
  costPerNight: Float
  "The listing's location"
  location: LocationInput  
  "The listing's amenities"
  amenities: [ID]
}

# Response type for creating a listing
type CreateListingResponse implements Response {
  code: Int! @shareable
  success: Boolean! @shareable
  message: String! @shareable
  listing: Listing @shareable
}

# Response type for updating a listing
type UpdateListingResponse implements Response {
  code: Int! @shareable
  success: Boolean! @shareable
  message: String! @shareable
  listing: Listing @shareable
}

# Enum representing the type of a listing location


type ReservedDate @shareable {
  checkInDate: DateTime! 
  checkOutDate: DateTime!
}

# Enum representing sorting criteria for listings
enum SortByCriteria {
  COST_ASC
  COST_DESC
}

# Type representing a listing
type Listing @key(fields: "id") {
  id: ID!
  title: String! @shareable
  description: String! @shareable
  pictures: [Picture!]! @shareable  
  numOfBeds: Int! @shareable
  costPerNight: Float! @shareable
  locationType: LocationType! @shareable
  hostId: ID! @shareable
  amenities: [Amenity!]! @shareable
  numberOfUpcomingBookings: Int! @shareable
  currentlyBookedDates: [ReservedDate]! @shareable
  totalCost(checkInDate: String!, checkOutDate: String!): Float @shareable
  location: Location @shareable
  saleAmount: Float @shareable
  bookingNumber: Int @shareable
  checkInDate: String! @shareable
  checkOutDate: String! @shareable
  listingStatus: ListingStatus @shareable
  bookings: [Booking!]! @shareable
  availability: [Availability]! @shareable
  priceRange: PriceRange! @shareable  # Changed to output type
  totalCostRange: TotalCostRange! @shareable  # Changed to output type
  locationFilter: Location! @shareable  # Changed to output type
  distance: Float @shareable
  filterlistings(filter: ListingFilterInput): [Listing!]! @shareable # Changed to output type
}

input ListingFilterInput {
  radius: Float
  city: String
  latitude: Float
  longitude: Float
  minCostPerNight: Float
  maxCostPerNight: Float
}

type Picture {
  url: String! @shareable
}


type PriceRange @key(fields: "id") {
  id: ID!  # Add an id field to use as the key
  min: Float @shareable
  max: Float @shareable
}


type TotalCostRange @key(fields: "id") {
  id: ID!  # Add an id field to use as the key
  min: Float @shareable
  max: Float @shareable
}


input PriceRangeInput {
  min: Float
  max: Float
}

input TotalCostRangeInput {
  min: Float
  max: Float
}



# Type representing a review


# Type representing a booking
type Booking @key(fields: "id") {
  id: ID!
  listing: Listing! @shareable
  guest: Guest! @shareable @cacheControl(maxAge: 3600)  # Cache for 1 hour
  review: Review @shareable
}

# Type representing a host
type Host @key(fields: "id") {
  id: ID!
 picture: String @shareable
}

# Input for full-text search
input FullTextSearchInput {
  searchText: String!
  limit: Int
  offset: Int
}

type SearchResult @key(fields: "id") {
  id: ID!
  "The type of search result (e.g., LISTING, USER)"
  type: SearchResultType! @shareable
  listings: [Listing!]! @shareable
  totalCount: Int! @shareable @cacheControl(maxAge: 3600)
}

enum SearchResultType {
  LISTING
  USER
}

type Location @key(fields: "id") {
  id: ID!
  "The location's name"
  name: String! @shareable
  "the country's name"
  country: String! @shareable
  "The location's postal code"
  postalCode: String! @shareable
  "The location's city"
  city: String! @shareable
  "The location's state"
  state: String! @shareable
  "The location's address"
  address: String! @shareable
  "The location's latitude"
  latitude: Float! @shareable
  "The location's longitude"
  longitude: Float! @shareable
 "The location's distance from a given point"
  radius: Float! @shareable 
}

type Availability @key(fields: "id") {
  id: ID!
  listing: Listing! @shareable @cacheControl(maxAge: 3600)  # Cache for 1 hour
  checkInDate: String! @shareable  @cacheControl(maxAge: 3600)
  checkOutDate: String! @shareable @cacheControl(maxAge: 3600)
  availability: Boolean! @shareable
}


# Type representing a review
type Review @key(fields: "id") {
  id: ID!
}

# Type representing a guest
type Guest @key(fields: "id") {
  id: ID!
  name: String! @shareable
  picture: String @shareable
}

"Represents an Airlock user's common properties"
interface User {
  id: ID!
  "The user's first and last name"
  name: String! 
  "The user's profile photo URL"
  picture: String
}

input CreateBookingInput {
  "ID of the listing associated with the booking"
  listingId: ID!
  "Date of check-in"
  checkInDate: DateTime!
  "Date of check-out"
  checkOutDate: DateTime!
}

