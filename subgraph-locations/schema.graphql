extend schema
  @link(url: "https://specs.apollo.dev/federation/v2.7", import: ["@key", "@shareable"])

scalar DateTime

type Query {
  "Get a location by its ID"
  location(id: ID!): Location @shareable
  "Search for locations by their name, country, city, or state"
  searchLocations(
    name: String
    country: String
    city: String
    state: String
    first: Int = 10
    after: String
  ): SearchResult! @shareable
}

extend type Mutation {
  "Creates a new Location for the currently authenticated host"
  createLocation(input: CreateLocationInput!): CreateLocationResponse!
  "Updates an existing Location"
  updateLocation(
    locationId: ID!
    location: UpdateLocationInput!
  ): UpdateLocationResponse!
}

type Location @key(fields: "id") {
  id: ID!
  "The location's name"
  name: String! @shareable
  "The country's name"
  country: String! @shareable
  "The location's postal code"
  postalCode: String! @shareable
  "The location's city"
  city: String! @shareable
  "The location's state"
  state: String! @shareable
  "The location's address"
  address: String! @shareable
  "The location's latitude"
  latitude: Float! @shareable
  "The location's longitude"
  longitude: Float! @shareable
  "The location's distance from a given point"
  radius: Float @shareable 
}

input CreateLocationInput {
  "The name of the location"
  name: String!
  "The latitude of the location"
  latitude: Float
  "The radius around the location"
  radius: Float
  "The longitude of the location"
  longitude: Float
  "The street address of the location"
  address: String
  "The city where the location is situated"
  city: String
  "The state or province of the location"
  state: String
  "The country of the location"
  country: String
  "The postal code of the location"
  postalCode: String
}

input UpdateLocationInput {
  "The name of the location"
  name: String
  "The latitude of the location"
  latitude: Float
  "The radius around the location"
  radius: Float
  "The longitude of the location"
  longitude: Float
  "The street address of the location"
  address: String
  "The city where the location is situated"
  city: String
  "The state or province of the location"
  state: String
  "The country of the location"
  country: String
  "The postal code of the location"
  postalCode: String
}

# Common interface for response types
interface Response {
  "Similar to HTTP status code, represents the status of the mutation"
  code: Int!
  "Indicates whether the mutation was successful"
  success: Boolean!
  "Human-readable message for the UI"
  message: String!
}

# Response type for creating a Location
type CreateLocationResponse implements Response {
  code: Int!
  success: Boolean!
  message: String!
  location: Location @shareable
}

# Response type for updating a Location
type UpdateLocationResponse implements Response {
  code: Int!
  success: Boolean!
  message: String!
  location: Location @shareable
}

# Pagination result type for searchLocations
type SearchResult {
  locations: [Location!]!
  totalCount: Int!
  hasNextPage: Boolean!
}
