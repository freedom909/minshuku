extend schema  
  @link(url: "https://specs.apollo.dev/federation/v2.7",  
  import: ["@key", "@shareable"])  

# SCALARS  
scalar DateTime  

# OBJECTS  

type Query {
  getUser(id: ID!): User @shareable
  listings: [Listing] @shareable
  "User accounts"
  user(id: ID!): User @shareable
  "Currently logged-in user"
  me: User! @shareable
  "Retrieves the account of the currently logged-in user."
  viewer: Account @shareable
  "Retrieves the account of the currently logged-in user."
  account(id: ID!): Account @shareable
  "Retrieves the accounts of the currently logged-in user."
  accounts: [Account] @shareable
  "Cart of the currently logged-in user."
  cart: Cart @shareable
  "Cart of the currently logged-in user."
  carts: [Cart]! @shareable
  "Retrieves the bookings of the currently logged-in user."
  bookingHistory: [Booking] @shareable   
  "Retrieves the bookings of the currently logged-in user."
  getBookingByGuest(guestId: ID!): [Booking] @shareable
  "retrieve the location of the currently logged-in user."
  location: Location @shareable
  getListingByHost(hostId: ID!): [Listing] @shareable
}

type Account @key(fields: "id") {
  "The unique ID associated with the account."
  id: ID! 
  "The date and time the account was created."
  createdAt: DateTime! @shareable
  "The email associated with the account (must be unique)."
  email: String! @shareable
}

type AuthPayload {
  "The user's JWT"
  token: String! @shareable
  "The user's ID"
  userId: ID! @shareable
}

"Represents an Airlock user's common properties"
interface User @key(fields: "id") {
  id: ID!
  "The user's first and last name"
  name: String!
  "The user's role"
  role: Role!
  "The user's profile photo URL"
  picture: String!
  "The email address of the user (must be unique)."
  email: String!
  "The nickname of the user"
  nickname: String!
  "The listings of the user"
  listings: [Listing]
}

type Host implements User @key(fields: "id") {
  id: ID! 
  "The user's first and last name"
  name: String! @shareable
  "The user's profile photo URL"
  picture: String! @shareable
  "The host's profile bio description, will be shown in the listing"
  description: String @shareable
  "The email address of the user (must be unique)."
  email: String! @shareable
  "The user's chosen nickname (must be unique)."
  nickname: String! @shareable
  "The role of the user"
  role: Role! @shareable
  "The listings of the host (must be unique)."
  listings: [Listing]! @shareable
  overallRating: Float! @shareable
}

enum Role {
  ADMIN
  GUEST
  HOST
}

type Guest implements User @key(fields: "id") {
  "The unique ID associated with the account."
  id: ID!
  "The user's first and last name"
  name: String! @shareable
  "The user's profile photo URL"
  picture: String! @shareable
  "The email address of the user (must be unique)."
  email: String! @shareable
  "The user's chosen nickname (must be unique)."
  nickname: String! @shareable
  "The role of the user"
  role: Role! @shareable
  "The bookings of the user"  
  bookings: [Booking]! @shareable
  "The carts of the user"
  carts: [Cart]! @shareable
  listings:[Listing] @shareable
}

type Cart @key(fields: "id") {
  "The unique ID associated with the cart."
  id: ID!
  "The items in the cart."
  items: [CartItem]! @shareable
  "The date and time the cart was created."
  createdAt: DateTime! @shareable
}

type CartItem @key(fields: "id") {
  "The unique ID associated with the cart item."
  id: ID!
  "The listing associated with the cart item."
  listing: Listing! @shareable
  "The quantity of the cart item."
  quantity: Int! @shareable
}

interface Response {
  "Similar to HTTP status code, represents the status of the mutation"
  code: Int! 
  "Indicates whether the mutation was successful"
  success: Boolean! 
  "Human-readable message for the UI"
  message: String!
}

"""
Provides data to update an existing account's email.
"""
input UpdateAccountEmailInput {
  "The unique ID associated with the account."
  id: ID!
  "The updated account email."
  email: String!
}

"""
Provides data to update an existing account's password. A current password and new password are required to update a password.
"""
input UpdateAccountPasswordInput {
  "The unique ID associated with the account."
  id: ID!
  "The updated account password."
  newPassword: String!
  "The existing account password."
  password: String!
}

"""
Provides data to create a new account.
"""
input CreateAccountInput {
  "The new account's email (must be unique)."
  email: String!
  "The new account's password."
  password: String!
}

type Listing @key(fields: "id") {
  "The unique ID associated with the listing."
  id: ID!
  "The title of the listing."
  title: String! @shareable
  "The description of the listing."
  description: String! @shareable
  "The price of the listing."
  price: Float! @shareable
  "The host of the listing."
  hostId: ID! @shareable
  "The location of the listing."
  location: Location! @shareable
  "The latitude of the listing."
  latitude: Float! @shareable
  "The longitude of the listing."
  longitude: Float! @shareable
}

type Review @key(fields: "id") {  
  id: ID!  
  userId: ID! @shareable  
  listingId: ID! @shareable  
  rating: Float!  
  text: String  
  createdAt: DateTime!  
} 
type Location @key(fields:"id") {
  "The unique ID associated with the location"
  id: ID! 
  "The name of the address"
  name: String! @shareable
  "The address of the location"
  address: String! @shareable
  "The city of the location"
  city: String! @shareable
  "The state of the location"
  state: String! @shareable
  "The zip code of the location"
  zip: String! @shareable
  "The listings of the location"
  listings: [Listing] @shareable
}

interface Node {
  "The node's ID"
  id: ID!
}

 _entities(representations: [_Any!]!): [_Entity]!

type _Service {
  sdl: String
}

type UserId {
  id: ID! @shareable
}

scalar _Any

union _Entity = Listing | Host | Guest | Booking | Cart 

type Mutation {
  "Creates a new account."
  createAccount(input: CreateAccountInput!): CreateAccountPayload! @shareable
  "Updates the email of an existing account."
  updateAccountEmail(input: UpdateAccountEmailInput!): UpdateAccountEmailPayload! @shareable
  "Updates the password of an existing account."
  updateAccountPassword(input: UpdateAccountPasswordInput!): UpdateAccountPasswordPayload! @shareable
  "Creates a new listing."
  createListing(input: CreateListingInput!): CreateListingResponse! @shareable
   logout: Boolean! @shareable 
}

type CreateAccountPayload implements Response {
  code: Int! @shareable
  success: Boolean! @shareable
  message: String! @shareable
  "The created account." 
  account: Account @shareable
}

type UpdateAccountEmailPayload implements Response {
  code: Int! @shareable
  success: Boolean! @shareable
  message: String! @shareable
  "The updated account."
  account: Account @shareable
}

type UpdateAccountPasswordPayload implements Response {
  code: Int! @shareable
  success: Boolean! @shareable
  message: String! @shareable
  "The updated account."
  account: Account @shareable
}

type CreateListingResponse implements Response {
  "The code status"
  code: Int! @shareable
  "The success status"
  success: Boolean! @shareable
  "The response message"
  message: String! @shareable
  "The listing that was created"
  listing: Listing! @shareable
  "The error that occurred, if any"
  error: String @shareable
}


input CreateListingInput {
  "The title of the listing"
  title: String!
  "The description of the listing"
  description: String
  "The price of the listing"
  price: Float!
  "The ID of the location"
  locationId: String!
  "The ID of the host"
  hostId: String!
  "The photo thumbnail of the listing"
  photoThumbnail: String!
  "The number of beds in the listing"
  numOfBeds: Int!
  "The cost per night of the listing"
  costPerNight: Float!
  "The type of location"
  locationType: LocationType!
  "The amenities of the listing"
  amenities: [AmenityInput!]!
  listingStatus : ListingStatus
}

input AmenityInput {
  type: String!
  description: String
}

enum AmenityCategory {
  ACCOMMODATION_DETAILS
  SPACE_SURVIVAL
  OUTDOORS
  UNKNOWN
}

enum LocationType {
  SPACESHIP
  HOUSE
  CAMPSITE
  APARTMENT
  ROOM
}

type Amenity @key(fields: "id") {
  id: ID!
  category: AmenityCategory! @shareable
  name: String! @shareable
}

enum ListingStatus{
  ACTIVE,
  PENDING,
  SOLD,
  DELETED,
  REJECT,
  CANCELLED,
  EXPIRED,
  COMPLETED
}

type Booking @key(fields: "id") {
  id: ID!
  "The user who made the booking"
  userId: ID! @shareable
  "The listing booked"
  listingId: ID! @shareable
  "The check-in date for the booking"
  checkInDate: DateTime! @shareable
  "The check-out date for the booking"
  checkOutDate: DateTime! @shareable
  "The total price for the booking"
  totalPrice: Float! @shareable
}



